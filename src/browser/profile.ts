/**
 * Browser-Use JS 浏览器配置模块
 *
 * 源文件: browser_use/browser/profile.py
 * 功能描述: 浏览器配置和启动参数管理，包括各种枚举和配置选项
 */

import * as os from 'os';
import * as path from 'path';
import { ViewportSize } from './types.js';

// 环境检测
export const IN_DOCKER =
  process.env.IN_DOCKER?.toLowerCase()[0] === 't' ||
  process.env.IN_DOCKER?.toLowerCase()[0] === 'y' ||
  process.env.IN_DOCKER === '1';

export const CHROME_DEBUG_PORT = 9242;

// Chrome 禁用组件列表
export const CHROME_DISABLED_COMPONENTS = [
  'AcceptCHFrame',
  'AutoExpandDetailsElement',
  'AvoidUnnecessaryBeforeUnloadCheckSync',
  'CertificateTransparencyComponentUpdater',
  'DestroyProfileOnBrowserClose',
  'DialMediaRouteProvider',
  'ExtensionManifestV2Disabled',
  'GlobalMediaControls',
  'HttpsUpgrades',
  'ImprovedCookieControls',
  'LazyFrameLoading',
  'LensOverlay',
  'MediaRouter',
  'PaintHolding',
  'ThirdPartyStoragePartitioning',
  'Translate',
  // 自定义添加
  'AutomationControlled',
  'BackForwardCache',
  'OptimizationHints',
  'ProcessPerSiteUpToMainFrameThreshold',
  'InterestFeedContentSuggestions',
  'CalculateNativeWinOcclusion',
  'HeavyAdPrivacyMitigations',
  'PrivacySandboxSettings4',
  'AutofillServerCommunication',
  'CrashReporting',
  'OverscrollHistoryNavigation',
  'InfiniteSessionRestore',
  'ExtensionDisableUnsupportedDeveloper',
];

// Chrome 默认参数
export const CHROME_DEFAULT_ARGS = [
  '--enable-features=NetworkService,NetworkServiceInProcess',
  '--enable-network-information-downlink-max',
  '--test-type=gpu',
  '--disable-sync',
  '--allow-legacy-extension-manifests',
  '--allow-pre-commit-input',
  '--disable-blink-features=AutomationControlled',
  '--install-autogenerated-theme=0,0,0',
  '--log-level=2',
  '--disable-focus-on-load',
  '--disable-window-activation',
  '--generate-pdf-document-outline',
  '--no-pings',
  '--ash-no-nudges',
  '--disable-infobars',
  '--simulate-outdated-no-au="Tue, 31 Dec 2099 23:59:59 GMT"',
  '--hide-crash-restore-bubble',
  '--suppress-message-center-popups',
  '--disable-domain-reliability',
  '--disable-datasaver-prompt',
  '--disable-speech-synthesis-api',
  '--disable-speech-api',
  '--disable-print-preview',
  '--safebrowsing-disable-auto-update',
  '--disable-external-intent-requests',
  '--disable-desktop-notifications',
  '--noerrdialogs',
  '--silent-debugger-extension-api',
  `--disable-features=${CHROME_DISABLED_COMPONENTS.join(',')}`,
];

// Chrome 无头参数
export const CHROME_HEADLESS_ARGS = ['--headless=new'];

// Chrome Docker 参数
export const CHROME_DOCKER_ARGS = [
  '--no-sandbox',
  '--disable-gpu-sandbox',
  '--disable-setuid-sandbox',
  '--disable-dev-shm-usage',
  '--no-xshm',
  '--no-zygote',
  '--single-process',
];

// Chrome 禁用安全参数
export const CHROME_DISABLE_SECURITY_ARGS = [
  '--disable-web-security',
  '--disable-site-isolation-trials',
  '--disable-features=IsolateOrigins,site-per-process',
  '--allow-running-insecure-content',
  '--ignore-certificate-errors',
  '--ignore-ssl-errors',
  '--ignore-certificate-errors-spki-list',
];

// Chrome 确定性渲染参数
export const CHROME_DETERMINISTIC_RENDERING_ARGS = [
  '--deterministic-mode',
  '--js-flags=--random-seed=1157259159',
  '--force-device-scale-factor=2',
  '--enable-webgl',
  '--font-render-hinting=none',
  '--force-color-profile=srgb',
];

/**
 * 获取显示器尺寸
 */
export function getDisplaySize(): ViewportSize | null {
  // 在Node.js环境中，我们无法直接获取显示器信息
  // 可以使用第三方库或返回默认值
  try {
    // 这里可以集成 screen-resolution 或类似的库
    // 目前返回常见的默认分辨率
    return { width: 1920, height: 1080 };
  } catch {
    return null;
  }
}

/**
 * 获取窗口调整偏移
 */
export function getWindowAdjustments(): [number, number] {
  const platform = os.platform();

  if (platform === 'darwin') {
    // macOS
    return [-4, 24];
  } else if (platform === 'win32') {
    // Windows
    return [-8, 0];
  } else {
    // Linux
    return [0, 0];
  }
}

/**
 * 验证URL格式
 */
export function validateUrl(url: string, schemes: string[] = []): string {
  try {
    const parsed = new URL(url);
    if (!parsed.hostname) {
      throw new Error(`Invalid URL format: ${url}`);
    }
    if (schemes.length > 0 && parsed.protocol) {
      const scheme = parsed.protocol.replace(':', '');
      if (!schemes.includes(scheme.toLowerCase())) {
        throw new Error(
          `URL has invalid scheme: ${url} (expected one of ${schemes})`
        );
      }
    }
    return url;
  } catch (error) {
    throw new Error(`Invalid URL: ${url}`);
  }
}

/**
 * 验证浮点数范围
 */
export function validateFloatRange(
  value: number,
  minVal: number,
  maxVal: number
): number {
  if (value < minVal || value > maxVal) {
    throw new Error(`Value ${value} outside of range ${minVal}-${maxVal}`);
  }
  return value;
}

/**
 * 验证CLI参数
 */
export function validateCliArg(arg: string): string {
  if (!arg.startsWith('--')) {
    throw new Error(
      `Invalid CLI argument: ${arg} (should start with --, e.g. --some-key="some value here")`
    );
  }
  return arg;
}

// 枚举定义
export enum ColorScheme {
  LIGHT = 'light',
  DARK = 'dark',
  NO_PREFERENCE = 'no-preference',
  NULL = 'null',
}

export enum Contrast {
  NO_PREFERENCE = 'no-preference',
  MORE = 'more',
  NULL = 'null',
}

export enum ReducedMotion {
  REDUCE = 'reduce',
  NO_PREFERENCE = 'no-preference',
  NULL = 'null',
}

export enum ForcedColors {
  ACTIVE = 'active',
  NONE = 'none',
  NULL = 'null',
}

export enum ServiceWorkers {
  ALLOW = 'allow',
  BLOCK = 'block',
}

export enum RecordHarContent {
  OMIT = 'omit',
  EMBED = 'embed',
  ATTACH = 'attach',
}

export enum RecordHarMode {
  FULL = 'full',
  MINIMAL = 'minimal',
}

export enum BrowserChannel {
  CHROMIUM = 'chromium',
  CHROME = 'chrome',
  CHROME_BETA = 'chrome-beta',
  CHROME_DEV = 'chrome-dev',
  CHROME_CANARY = 'chrome-canary',
  MSEDGE = 'msedge',
  MSEDGE_BETA = 'msedge-beta',
  MSEDGE_DEV = 'msedge-dev',
  MSEDGE_CANARY = 'msedge-canary',
}

// 默认配置路径
export const BROWSERUSE_CONFIG_DIR = path.resolve(
  os.homedir(),
  '.config/browseruse'
);
export const BROWSERUSE_PROFILES_DIR = path.join(
  BROWSERUSE_CONFIG_DIR,
  'profiles'
);
export const BROWSERUSE_CHROMIUM_USER_DATA_DIR = path.join(
  BROWSERUSE_PROFILES_DIR,
  'default'
);
export const BROWSERUSE_DEFAULT_CHANNEL = BrowserChannel.CHROMIUM;

/**
 * 浏览器上下文参数接口
 */
export interface BrowserContextArgs {
  acceptDownloads?: boolean;
  offline?: boolean;
  strictSelectors?: boolean;
  permissions?: string[];
  bypassCsp?: boolean;
  extraHttpHeaders?: Record<string, string>;
  ignoreHttpsErrors?: boolean;
  javaScriptEnabled?: boolean;
  baseUrl?: string;
  serviceWorkers?: ServiceWorkers;
  userAgent?: string;
  screen?: ViewportSize;
  viewport?: ViewportSize;
  noViewport?: boolean;
  deviceScaleFactor?: number;
  isMobile?: boolean;
  hasTouch?: boolean;
  locale?: string;
  timezoneId?: string;
  colorScheme?: ColorScheme;
  contrast?: Contrast;
  reducedMotion?: ReducedMotion;
  forcedColors?: ForcedColors;
  recordHarContent?: RecordHarContent;
  recordHarMode?: RecordHarMode;
  recordHarOmitContent?: boolean;
  recordHarPath?: string;
  recordHarUrlFilter?: string | RegExp;
  recordVideoDir?: string;
  recordVideoSize?: ViewportSize;
}

/**
 * 浏览器连接参数接口
 */
export interface BrowserConnectArgs {
  headers?: Record<string, string>;
  slowMo?: number;
  timeout?: number;
}

/**
 * 浏览器启动参数接口
 */
export interface BrowserLaunchArgs {
  env?: Record<string, string | number | boolean>;
  executablePath?: string;
  headless?: boolean;
  args?: string[];
  ignoreDefaultArgs?: string[] | boolean;
  channel?: BrowserChannel;
  chromiumSandbox?: boolean;
  devtools?: boolean;
  slowMo?: number;
  timeout?: number;
  downloadsPath?: string;
  tracesDir?: string;
  handleSighup?: boolean;
  handleSigint?: boolean;
  handleSigterm?: boolean;
}

/**
 * 浏览器配置文件接口
 */
export interface BrowserProfile
  extends BrowserContextArgs,
    BrowserLaunchArgs,
    BrowserConnectArgs {
  id?: string;
  stealth?: boolean;
  disableSecurity?: boolean;
  deterministicRendering?: boolean;
  allowedDomains?: string[];
  keepAlive?: boolean;
  windowSize?: ViewportSize;
  windowPosition?: ViewportSize;
  defaultNavigationTimeout?: number;
  defaultTimeout?: number;
  minimumWaitPageLoadTime?: number;
  waitForNetworkIdlePageLoadTime?: number;
  maximumWaitPageLoadTime?: number;
  waitBetweenActions?: number;
  includeDynamicAttributes?: boolean;
  highlightElements?: boolean;
  viewportExpansion?: number;
  profileDirectory?: string;
  userDataDir?: string;
}

/**
 * 默认浏览器配置
 */
export const DEFAULT_BROWSER_PROFILE: BrowserProfile = {
  // 上下文参数
  acceptDownloads: true,
  offline: false,
  strictSelectors: false,
  permissions: ['clipboard-read', 'clipboard-write', 'notifications'],
  bypassCsp: false,
  extraHttpHeaders: {},
  ignoreHttpsErrors: false,
  javaScriptEnabled: true,
  serviceWorkers: ServiceWorkers.ALLOW,
  colorScheme: ColorScheme.LIGHT,
  contrast: Contrast.NO_PREFERENCE,
  reducedMotion: ReducedMotion.NO_PREFERENCE,
  forcedColors: ForcedColors.NONE,
  recordHarContent: RecordHarContent.EMBED,
  recordHarMode: RecordHarMode.FULL,
  recordHarOmitContent: false,
  isMobile: false,
  hasTouch: false,

  // 启动参数
  args: [],
  ignoreDefaultArgs: [
    '--enable-automation',
    '--disable-extensions',
    '--hide-scrollbars',
    '--disable-features=AcceptCHFrame,AutoExpandDetailsElement,AvoidUnnecessaryBeforeUnloadCheckSync,CertificateTransparencyComponentUpdater,DeferRendererTasksAfterInput,DestroyProfileOnBrowserClose,DialMediaRouteProvider,ExtensionManifestV2Disabled,GlobalMediaControls,HttpsUpgrades,ImprovedCookieControls,LazyFrameLoading,LensOverlay,MediaRouter,PaintHolding,ThirdPartyStoragePartitioning,Translate',
  ],
  channel: BROWSERUSE_DEFAULT_CHANNEL,
  chromiumSandbox: !IN_DOCKER,
  devtools: false,
  slowMo: 0,
  timeout: 30000,
  handleSighup: true,
  handleSigint: false,
  handleSigterm: false,

  // 连接参数

  // 自定义参数
  stealth: false,
  disableSecurity: false,
  deterministicRendering: false,
  keepAlive: false,
  windowPosition: { width: 0, height: 0 },
  defaultNavigationTimeout: undefined,
  defaultTimeout: undefined,
  minimumWaitPageLoadTime: 0.25,
  waitForNetworkIdlePageLoadTime: 0.5,
  maximumWaitPageLoadTime: 5.0,
  waitBetweenActions: 0.5,
  includeDynamicAttributes: true,
  highlightElements: true,
  viewportExpansion: 500,
  profileDirectory: 'Default',
  userDataDir: BROWSERUSE_CHROMIUM_USER_DATA_DIR,
};

/**
 * 创建浏览器配置
 */
export function createBrowserProfile(
  overrides: Partial<BrowserProfile> = {}
): BrowserProfile {
  return {
    ...DEFAULT_BROWSER_PROFILE,
    ...overrides,
    id: overrides.id || generateProfileId(),
  };
}

/**
 * 生成配置文件ID
 */
function generateProfileId(): string {
  return `profile-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
}

/**
 * 获取浏览器启动参数
 */
export function getBrowserArgs(profile: BrowserProfile): string[] {
  const args = [...CHROME_DEFAULT_ARGS];

  if (profile.headless) {
    args.push(...CHROME_HEADLESS_ARGS);
  }

  if (IN_DOCKER) {
    args.push(...CHROME_DOCKER_ARGS);
  }

  if (profile.disableSecurity) {
    args.push(...CHROME_DISABLE_SECURITY_ARGS);
  }

  if (profile.deterministicRendering) {
    args.push(...CHROME_DETERMINISTIC_RENDERING_ARGS);
  }

  if (profile.args) {
    args.push(...profile.args);
  }

  return args;
}

/**
 * 验证浏览器配置
 */
export function validateBrowserProfile(profile: BrowserProfile): void {
  if (profile.headless && profile.devtools) {
    throw new Error(
      'headless=true and devtools=true cannot both be set at the same time'
    );
  }

  if (profile.viewport && profile.noViewport) {
    throw new Error('viewport and noViewport cannot both be set');
  }

  if (profile.baseUrl) {
    validateUrl(profile.baseUrl);
  }
}
