---
description:
globs:
alwaysApply: true
---
# Browser-Use JS Cursor Rules

## 项目概述
Browser-Use JS 是 Browser-Use 的 nodejs 版本复刻，让 AI 代理能够nodejs。

请参考 browser-use 项目一比一还原

## 技术栈

### 核心技术
- **语言**: TypeScript
- **构建工具**: Vite
- **运行环境**: 浏览器
- **目标**: ES2020+
- **模块系统**: ESM
- **包管理**: pnpm
- **html 转 Markdown**: 使用 turndown

### AI 集成
- **AI SDK**: @ai-sdk/openai - Vercel AI SDK OpenAI Provider
- **AI 核心**: ai - Vercel AI SDK 核心库
- **支持模型**: OpenAI GPT 系列 (gpt-4o, gpt-4-turbo, gpt-3.5-turbo 等)

### 测试框架
- **测试运行器**: Vitest
- **测试 UI**: @vitest/ui - 可视化测试界面
- **覆盖率**: @vitest/coverage-v8
- **DOM 测试**: jsdom
- **状态管理**: zustand


### 开发工具
- **代码检查**: ESLint 9.x
- **代码格式化**: Prettier
- **Git Hooks**: Husky
- **预提交检查**: lint-staged

## Git Commit Message 规范

遵循 Conventional Commits 规范。

## 项目记忆管理

- MEMORY.md 为项目知识点记录，每次有新的知识点、问题解决方案或重要决策时，请及时更新此文档。保持项目记忆的完整性和时效性。


## 编码规范

### TypeScript 规范
- 使用严格的 TypeScript 配置
- 所有函数和方法必须有明确的类型注解
- 优先使用 interface 而不是 type（除非需要联合类型）
- 使用 Pydantic 风格的数据验证（通过 TypeScript 类型）
### 命名规范
- **文件名**: 使用 kebab-case (例: `clickable-element-processor.ts`)
- **类名**: 使用 PascalCase (例: `BrowserController`)
- **函数/变量名**: 使用 camelCase (例: `processElement`)
- **常量**: 使用 UPPER_SNAKE_CASE (例: `MAX_RETRY_COUNT`)
- **接口**: 使用 PascalCase，可选择 I 前缀 (例: `IActionResult` 或 `ActionResult`)

### 注释和文档
- 所有公共 API 必须有 JSDoc 注释
- 复杂的业务逻辑需要添加解释性注释
- 使用中文注释（与项目文档保持一致）

记住：始终优先考虑代码的可读性、可维护性和性能。遵循这些规则将帮助创建一个高质量的 Browser-Use JS 项目。
