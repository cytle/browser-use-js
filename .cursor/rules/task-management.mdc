---
description: 任务管理
globs:
alwaysApply: false
---
# Browser-Use JS 任务管理

## 📋 任务管理概述

本规则文件专门用于 Browser-Use JS 项目的任务管理，确保开发过程中的任务跟踪、进度管理和质量控制。

## 🎯 任务分类系统

### 任务类型标识
使用以下前缀标识不同类型的任务：

- `FEAT:` - 新功能开发
- `FIX:` - Bug 修复
- `REFACTOR:` - 代码重构
- `DOCS:` - 文档更新
- `TEST:` - 测试相关
- `PERF:` - 性能优化
- `STYLE:` - 代码风格调整
- `BUILD:` - 构建系统相关
- `CI:` - 持续集成相关

### 优先级分级
- `P0` - 紧急 (阻塞性问题，需立即处理)
- `P1` - 高优先级 (重要功能，本周内完成)
- `P2` - 中优先级 (常规功能，本月内完成)
- `P3` - 低优先级 (优化改进，有时间时处理)

### 复杂度评估
- `XS` - 极简单 (< 1小时)
- `S` - 简单 (1-4小时)
- `M` - 中等 (0.5-1天)
- `L` - 复杂 (1-3天)
- `XL` - 极复杂 (> 3天，需要分解)

## 📝 任务创建规范

### 任务标题格式
```
[类型][优先级][复杂度] 任务描述
例如: [FEAT][P1][M] 实现 AI 代理核心决策引擎
```

### 任务描述模板
```markdown
## 任务概述
简要描述任务目标和背景

## 验收标准
- [ ] 具体的验收条件1
- [ ] 具体的验收条件2
- [ ] 具体的验收条件3

## 技术要求
- 使用的技术栈
- 性能要求
- 兼容性要求

## 依赖关系
- 前置任务: #任务编号
- 阻塞任务: #任务编号

## 预估工时
X 小时/天

## 备注
其他重要信息
```

## 🔄 任务状态管理

### 状态流转
```
待办 (TODO) → 进行中 (IN_PROGRESS) → 代码审查 (REVIEW) → 测试 (TESTING) → 完成 (DONE)
                    ↓
                 暂停 (PAUSED) ← → 阻塞 (BLOCKED)
```

### 状态标识
在代码注释中使用以下标识：
```typescript
// TODO: [P1][M] 实现用户认证功能
// IN_PROGRESS: [P1][M] 正在开发 AI 代理核心逻辑 - @username
// REVIEW: [P2][S] 等待代码审查 - DOM 元素处理器
// TESTING: [P1][L] 正在测试浏览器交互功能
// BLOCKED: [P1][M] 等待 API 接口定义 - 依赖 #123
// PAUSED: [P2][S] 暂停开发，等待需求确认
// DONE: [P1][M] 已完成 - 动作注册系统实现
```

## 📊 进度跟踪规范

### 每日进度更新
在相关文件顶部添加进度注释：
```typescript
/**
 * 开发进度: 60% 完成
 * 最后更新: 2024-01-15
 * 当前状态: IN_PROGRESS
 * 负责人: @username
 * 预计完成: 2024-01-20
 */
```

### 里程碑管理
在 TASK.md 中维护里程碑进度：
```markdown
## 🎯 里程碑进度

### 里程碑 1: 核心架构搭建 (2024-01-31)
- [x] 项目结构设计
- [x] TypeScript 配置
- [ ] 核心模块接口定义
- [ ] 基础测试框架搭建
进度: 50% (2/4)

### 里程碑 2: AI 代理实现 (2024-02-15)
- [ ] Agent 核心类
- [ ] 记忆管理系统
- [ ] LLM 集成
进度: 0% (0/3)
```

## 🔍 代码中的任务标记

### 标记格式
```typescript
// TODO: [P1][M] 实现错误重试机制
// FIXME: [P0][S] 修复内存泄漏问题
// HACK: [P2][XS] 临时解决方案，需要重构
// NOTE: 重要说明或设计决策
// OPTIMIZE: [P3][M] 性能优化点
// SECURITY: [P1][L] 安全相关改进
```

### 详细任务注释
```typescript
/**
 * TODO: [FEAT][P1][L] 实现智能元素识别
 *
 * 描述: 需要实现能够智能识别页面中可交互元素的功能
 *
 * 要求:
 * - 识别按钮、链接、输入框等可交互元素
 * - 处理动态加载的内容
 * - 支持 Shadow DOM
 *
 * 验收标准:
 * - [ ] 能识别 95% 以上的标准 HTML 交互元素
 * - [ ] 支持 React/Vue 等框架的组件
 * - [ ] 性能: 识别时间 < 100ms
 *
 * 依赖: DOM 处理器基础功能
 * 预估: 2-3 天
 * 负责人: @username
 * 创建时间: 2024-01-15
 */
```

## 📈 任务优先级管理

### 优先级决策矩阵
```
影响程度 vs 紧急程度:
                高影响    低影响
高紧急        P0        P1
低紧急        P1        P2/P3
```

### 优先级调整规则
1. **P0 任务**: 立即处理，其他任务暂停
2. **P1 任务**: 当前迭代必须完成
3. **P2 任务**: 下个迭代优先考虑
4. **P3 任务**: 有空闲时间时处理

### 依赖关系管理
```typescript
/**
 * 依赖关系图:
 *
 * [核心架构] → [AI代理] → [浏览器控制] → [DOM处理]
 *      ↓           ↓           ↓
 * [类型定义] → [控制器] → [动作注册]
 *      ↓
 * [测试框架] → [单元测试] → [集成测试]
 */
```

## 🚀 任务执行规范

### 开始任务前检查清单
- [ ] 确认任务描述和验收标准清晰
- [ ] 检查依赖任务是否完成
- [ ] 评估技术方案可行性
- [ ] 准备必要的开发环境
- [ ] 创建对应的 Git 分支

### 任务执行中规范
- [ ] 每日更新任务状态
- [ ] 遇到阻塞及时标记和沟通
- [ ] 保持代码提交的原子性
- [ ] 及时更新相关文档
- [ ] 编写必要的测试用例

### 任务完成检查清单
- [ ] 所有验收标准已满足
- [ ] 代码已通过 ESLint 检查
- [ ] 单元测试覆盖率达标
- [ ] 相关文档已更新
- [ ] 代码已提交并推送
- [ ] 任务状态更新为 DONE

## 🔧 工具集成

### Git 提交信息格式
```
<type>[task-id]: <description>

例如:
feat[T-001]: 实现 AI 代理核心决策引擎
fix[T-002]: 修复 DOM 元素选择器bug
docs[T-003]: 更新 API 使用文档
```

### 分支命名规范
```
<type>/<task-id>-<brief-description>

例如:
feature/T-001-ai-agent-core
bugfix/T-002-dom-selector-fix
docs/T-003-api-documentation
```

### PR 标题格式
```
[<type>][<priority>] <description> (#<task-id>)

例如:
[FEAT][P1] 实现 AI 代理核心决策引擎 (#T-001)
[FIX][P0] 修复内存泄漏问题 (#T-002)
```

## 📋 任务模板

### 功能开发任务模板
```markdown
## [FEAT][P1][M] 功能名称

### 任务概述
描述要开发的功能及其价值

### 技术方案
- 技术选型
- 架构设计
- 关键实现点

### 验收标准
- [ ] 功能正常工作
- [ ] 性能满足要求
- [ ] 测试覆盖率 > 80%
- [ ] 文档完整

### 风险评估
- 技术风险
- 时间风险
- 依赖风险

### 时间规划
- 设计: X 小时
- 开发: X 小时
- 测试: X 小时
- 文档: X 小时
```

### Bug 修复任务模板
```markdown
## [FIX][P0][S] Bug 描述

### 问题描述
详细描述 bug 现象和影响

### 复现步骤
1. 步骤1
2. 步骤2
3. 步骤3

### 预期行为
描述正确的行为应该是什么

### 根因分析
分析 bug 产生的根本原因

### 解决方案
描述修复方案

### 测试计划
- [ ] 验证修复效果
- [ ] 回归测试
- [ ] 边界情况测试
```

## 📊 任务度量指标

### 开发效率指标
- 任务完成率 = 已完成任务数 / 总任务数
- 平均完成时间 = 总开发时间 / 完成任务数
- 预估准确率 = 准确预估任务数 / 总任务数

### 质量指标
- Bug 率 = Bug 数量 / 功能点数量
- 返工率 = 返工任务数 / 总任务数
- 测试覆盖率 = 测试覆盖代码行数 / 总代码行数

### 进度指标
- 里程碑达成率 = 按时完成里程碑数 / 总里程碑数
- 任务延期率 = 延期任务数 / 总任务数
- 阻塞时间比例 = 阻塞时间 / 总开发时间

## 🎯 最佳实践

### 任务分解原则
1. **单一职责**: 每个任务只关注一个具体目标
2. **可测试**: 任务结果可以通过测试验证
3. **独立性**: 尽量减少任务间的强依赖
4. **适当粒度**: 任务不宜过大或过小

### 沟通协作
1. **及时同步**: 遇到问题及时沟通
2. **文档先行**: 重要决策要有文档记录
3. **代码审查**: 所有代码变更都要经过审查
4. **知识分享**: 定期分享技术心得和经验

### 持续改进
1. **定期回顾**: 每个迭代结束后进行回顾
2. **流程优化**: 根据实际情况调整工作流程
3. **工具改进**: 持续优化开发工具和环境
4. **技能提升**: 鼓励学习新技术和最佳实践

---

**注意**: 本规则文件应与项目的实际情况相结合，根据团队规模和项目特点进行适当调整。
